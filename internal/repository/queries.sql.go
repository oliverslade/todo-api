// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package repository

import (
	"context"
)

const createTodo = `-- name: CreateTodo :exec
INSERT INTO todos (message, is_finished) VALUES (?, ?)
`

type CreateTodoParams struct {
	Message    string
	IsFinished bool
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) error {
	_, err := q.db.ExecContext(ctx, createTodo, arg.Message, arg.IsFinished)
	return err
}

const getAllTodos = `-- name: GetAllTodos :many
SELECT id, message, is_finished FROM todos
ORDER BY id
`

func (q *Queries) GetAllTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getAllTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(&i.ID, &i.Message, &i.IsFinished); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
